import axios from "axios";

/**
 * L·∫•y multiplier (contractSize) v√† t√≠nh volume v√†o l·ªánh
 * @param {string} symbol - C·∫∑p futures, v√≠ d·ª• "BTC_USDT"
 * @param {number} balance - S·ªë USDT mu·ªën d√πng
 * @param {number} leverage - ƒê√≤n b·∫©y
 * @param {number} price - Gi√° v√†o l·ªánh
 * @returns {Promise<{multiplier: number, volume: number}>}
 */
async function getVolume(symbol, balance, leverage, price) {
  try {
    const url = `https://contract.mexc.com/api/v1/contract/detail?symbol=${symbol}`;
    const response = await axios.get(url);

    if (!response.data?.data) {
      throw new Error("Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin h·ª£p ƒë·ªìng!");
    }

    // Tr∆∞·ªùng m·ªõi l√† contractSize (kh√¥ng ph·∫£i contractValue)
    const multiplier = response.data.data.contractSize;
console.log("response.data.data", response.data.data);

    if (!multiplier) {
      throw new Error("Kh√¥ng t√¨m th·∫•y contractSize trong d·ªØ li·ªáu tr·∫£ v·ªÅ!");
    }

    // T√≠nh volume
    const volume = (balance * leverage) / (price * multiplier);

    return {
      multiplier,
      volume: Number(volume.toFixed(4)),
    };
  } catch (err) {
    console.error("L·ªói khi l·∫•y multiplier:", err.message);
    return null;
  }
}

// üß™ Test
(async () => {
  const symbol = "PING_USDT";
  const balance = 1;  // USDT
  const leverage = 20; // ƒë√≤n b·∫©y
  const price = 0.02871; // gi√° PING_USDT hi·ªán t·∫°i

  const result = await getVolume(symbol, balance, leverage, price);
  if (result) {
    console.log(`Multiplier (${symbol}):`, result.multiplier);
    console.log(`Volume c·∫ßn ƒë·∫∑t:`, result.volume);
  }
})();

// Multiplier (PING_USDT): 10
// Volume c·∫ßn ƒë·∫∑t: 69.6621
